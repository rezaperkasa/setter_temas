#include <UTFT.h>
#include <UTouch.h>
#include <EEPROMex.h>
#include <dht.h>



UTFT myGLCD(ITDB50, 38, 39, 40, 41); //pins used for TFT
UTouch  myTouch(6, 5, 4, 3, 2); //pins used for Touch

#define TOUCH_ORIENTATION  LANDSCAPE

//pin humidity
#define DHT22_PIN A7
dht DHT;


//---- Kalibrasi ---------
int nilai;
float kalibrasi = 0;
float nilaiKalibrasi = 0;
//---- Kalibrasi ---------

// Timer
int turningTimerSc = 0, turnRight = 0, turnLeft = 0, turningTimerMnt = 0,
    cancelAlarmTimer = 0, alarmTestTimer = 0, idleSpray = 0, dlTimer = 0;

//---- Humidity -------
//int portHum = 2;
int rhsense;
int RealHum, OldRealHum;
//---- Humidity -------

//......DHT........
float TempDhtF, TempDhtC, OldDhtF;
//......DHT........

//------ Temp Depan -----
int PT100 = 0;

float Temperature = 0;
float TemperaturePT100 = 0;
float jmlRata = 0;
float jmlTemp = 0;
int   jml = 0;
float TempC = 0;
float TempF = 0, oldTempF = 0;
int sampling = 1000;
float jmlF = 0, jmlC = 0;
//------ Temp Depan -----

//------ Temp Belakang -----
int PT100B = 1;

float TemperatureB = 0;
float TemperaturePT100B = 0;
float jmlRataB = 0;
float jmlTempB = 0;
int   jmlB = 0;
float TempCB = 0;
float TempFB = 0, oldTempFB = 0;
int samplingB = sampling;
float jmlFB = 0, jmlCB = 0;
//------ Temp Depan -----

//------ Setting ------------
// akan dibaca dari port
float heatTemp = 0, setPoint = 0, setPointAtas = 0,
      setPointBawah = 0, lowTemp = 0;
int setHumBawah = 0, setHumAtas = 0, setHumPoint = 0, setHumPointAtas = 0
                                  , setHumPointBawah = 0;

//output port
int Cooler1 = 44, Cooler2 = 48, Spray = 50,
    Heater1 = 42, Heater2 = 46, Alarm = 8, fanReturn = 53,
    alarmCancel = 9, alarmOut = 52;

// ------ Spray ----------
int jmlTimerSpray = 2, jmlTimer = 0;
int sprayON = 0, sprayH = 0, sprayL = 0;
//-------Spray-----------

//----------Status--------
int spraySt = 0, heater1St = 0, heater2St = 0, cooler1St = 0,
    cooler2St = 0, fan1St = 0, fan2St = 0, alarmSt = 0,
    fanReturnSt = 0, fanFail = 0, turnSt = 0, alarmdlSt = 0
    ,almDpSt = 0, almBkSt = 0, almHumSt = 0, turningSt = 0, almDisSt = 0
    , oldHeater1St = 0, oldCooler1St = 0, oldHeater2St = 0, oldCooler2St = 0
    , oldSpraySt = 0, oldAlmDpSt = 0, oldAlmBkSt = 0, oldAlmHumSt = 0
    , oldAlarmSt = 0, oldFanFail = 0, oldAlarmCancel = 0;


float dpn1 = 0, dpn2 = 0, blk1 = 0, blk2 = 0, hum1 = 0, hum2 = 0,
      high1 = 0, high2 = 0, rangeAtas1 = 0, rangeAtas2, rangeBwh1 = 0,
      rangeBwh2 = 0, low1 = 0, low2 = 0, heat = 0;
float humLow = 0, humHigh = 0, aFan = 1, bFan = 1, aLrm = 0,
      test = 0, dAlm = 0;
//--------Status-------

//--setting kalibrasi
float kalibrasiDepan = 0, kalibrasiBlk = 0;
int kalibrasiHum = 0;

//---setting kalibrasi

//----pilih warna----
int color = 0;
word colorlist[] = {VGA_WHITE, VGA_BLACK, VGA_RED, VGA_BLUE, VGA_GREEN, VGA_FUCHSIA, VGA_YELLOW, VGA_AQUA};

//----pilih font-----
extern uint8_t BigFont[];
extern uint8_t SevenSegmentFull[];
extern uint8_t Inconsola[];


//---lokasi EEPROM-----
int EepromSetpoint = 10;
int EepromSetpointHum = 20;
int EepromKalDp = 35;
int EepromKalBk = 45;
int EepromKalHum = 55;
int EepromDisAlm = 60;
//int EepromSampling = 65;

int page = 0;
int x, y;


void setup()
{
  EepromRead();
  graphSetup();
  checkPinMode();

}

void loop()
{

  graphLoop();
  // sensor suhu dan humidity
  checkTempDepan();
  checkTempBelakang();
  checkHumidity();

  // jika spray jalan... lakukan timer
  //controlSpray();
  sprayTimer();

  // controll ada disini
  posisiTempBawah();
  posisiTempRange();
  posisiTempAtas();
  posisiSpray();
  delayAlarm();
  alarmTest();
  controlAlarm();
  alarmFanFail();
  //disableAlarm();

  // kirim data output ke serial
  checkStatusOutput();

  // kirim serial string
  cetakSerial();

  signal();
  delay(1);
}



void EepromRead()
{
  setPoint = EEPROM.readFloat(EepromSetpoint);
  setHumPoint = EEPROM.read(EepromSetpointHum);
  kalibrasiDepan = EEPROM.readFloat(EepromKalDp);
  kalibrasiBlk = EEPROM.readFloat(EepromKalBk);
  kalibrasiHum = EEPROM.read(EepromKalHum);
  //sampling = EEPROM.read(EepromSampling);

  heatTemp = setPoint + 0.5;
  setPointAtas = setPoint + 0.2;
  setPointBawah = setPoint - 0.1;
  lowTemp = setPoint - 0.5;

  setHumPointBawah = setHumPoint - 2;
  setHumPointAtas = setHumPoint + 2;
  setHumAtas = setHumPoint + 10;
  setHumBawah = setHumPoint - 10;
  sampling = 1000;
  samplingB = sampling;
  //oldTempF = 0;
  //oldTempFB = 0;
}

void checkPinMode()
{
  pinMode(Cooler1, OUTPUT);
  pinMode(Spray, OUTPUT);
  pinMode(Heater1, OUTPUT);
  pinMode(Heater2, OUTPUT);
  pinMode(Cooler2, OUTPUT);
  pinMode(Alarm, OUTPUT);
  pinMode(fanReturn, INPUT);
  pinMode(alarmCancel, OUTPUT);
  pinMode(alarmOut, OUTPUT);
  //pinMode(11, OUTPUT);
  DHT.read22(DHT22_PIN);
}


void graphSetup()
{
  // Initial setup
  myGLCD.InitLCD(LANDSCAPE);
  myGLCD.clrScr();
  myTouch.InitTouch(LANDSCAPE); //LANDSCAPE
  myTouch.setPrecision(PREC_HI);
  mainscr();
  page = 0;
}


void checkTempDepan()
{

  TemperaturePT100 = analogRead (PT100);

  //TemperaturePT100 = (TemperaturePT100 * 0.00488);
  jml += 1;
  jmlTemp += TemperaturePT100;

  if ( jml >= sampling )
  {
    TempC = 0;
    TempF = 0;

    //jmlRata = mode((TF,1000), DEC);
    jmlRata = jmlTemp / sampling;
    TemperaturePT100 = (jmlRata * 0.00488);
    TempC = (TemperaturePT100 * 27.5);

    TempF = ((TempC * 9 / 5) + 32);


    // Ini kutambahkan karena posisi 0 masih tinggi
    TempF = TempF - 25 + kalibrasiDepan;
    
    if (oldTempF != 0)
       TempF = (TempF + oldTempF ) / 2;
    /*
    if (oldTempF != 0) {
      if (TempF - oldTempF > 0.1) TempF = oldTempF + 0.1;
      if (oldTempF - TempF > 0.1) TempF = oldTempF - 0.1;
    }
    */
    oldTempF = TempF; 
  }
}


void checkTempBelakang()
{

  TemperaturePT100B = analogRead (PT100B);

  //TemperaturePT100 = (TemperaturePT100 * 0.00488);
  jmlB += 1;
  jmlTempB += TemperaturePT100B;

  if ( jmlB >= samplingB )
  {
    TempCB = 0;
    TempFB = 0;

    //jmlRata = mode((TF,1000), DEC);
    jmlRataB = jmlTempB / samplingB;
    TemperaturePT100B = (jmlRataB * 0.00488);
    TempCB = (TemperaturePT100B * 27.5);

    TempFB = ((TempCB * 9 / 5) + 32);


    // Ini kutambahkan karena posisi 0 masih tinggi
    TempFB = TempFB - 25  + kalibrasiBlk;
    
    if (oldTempFB != 0)
       TempFB = (TempFB + oldTempFB ) / 2;
    /*
    if (oldTempFB != 0) {
      if (TempFB - oldTempFB > 0.1) TempFB = oldTempFB + 0.1;
      if (oldTempFB - TempFB > 0.1) TempFB = oldTempFB - 0.1;
    }
    */
    oldTempFB = TempFB; 
  }
}


void checkHumidity()
{

  if ( jml >= sampling )
  {
    DHT.read22(DHT22_PIN);
    TempDhtC = DHT.temperature;
    RealHum = DHT.humidity;

    RealHum = RealHum - 20 + kalibrasiHum;


    TempDhtF = ((TempDhtC * 9 / 5) + 32);
  }

}




void cetakSerial()
{
  if ( jml >= sampling )
  {
    if (page == 0)
    {
        myGLCD.setFont(SevenSegmentFull);
        myGLCD.setColor(VGA_RED);
        myGLCD.setBackColor(VGA_BLACK);
        myGLCD.printNumF(TempF, 1, 15, 110);
        myGLCD.printNumF(TempFB, 1 , 15, 215);

      if (RealHum >= 0)
      {
        myGLCD.setColor(VGA_RED);
        myGLCD.setBackColor(VGA_BLACK);
        myGLCD.printNumI(RealHum, 15, 320, 2);
      }
    }
    jml = 0;
    jmlTemp = 0;
    jmlC = 0;
    jmlF = 0;

    jmlB = 0;
    jmlTempB = 0;
    jmlCB = 0;
    jmlFB = 0;
  }
}



void posisiTempBawah()
{
  // jika posisi temp dibawah setting
  // nyalakan heater on, cooler off, fan off
  // Depan
    if (TempF <= lowTemp)
    {
      digitalWrite(Heater1, LOW);
      digitalWrite(Cooler1, HIGH);
      if (alarmTestTimer == 0) {
        if (almDpSt == 0) {
          if (almBkSt == 0) {
            if (almHumSt == 0) {
              if (fanFail == 0) {
                digitalWrite(Alarm, LOW);
              }
            }
          }
        }
      }
    }

    // Belakang
    if (TempFB <= lowTemp)
    {
      digitalWrite(Heater2, LOW);
      digitalWrite(Cooler2, HIGH);
      if (alarmTestTimer == 0) {
        if (almDpSt == 0) {
          if (almBkSt == 0) {
            if (almHumSt == 0) {
              if (fanFail == 0) {
                digitalWrite(Alarm, LOW);
              }
            }
          }
        }
      }
    }
  }


void posisiTempRange()
{
  // jika posisi temp range
  // matikan semua
  //Depan
    if (TempF >= setPoint)
    {
      digitalWrite(Heater1, HIGH);
      digitalWrite(Cooler1, HIGH);
      if (alarmTestTimer == 0) {
        if (almDpSt == 0) {
          if (almBkSt == 0) {
            if (almHumSt == 0) {
              if (fanFail == 0) {
                digitalWrite(Alarm, LOW);
              }
            }
          }
        }
      }
    }

    //Belakang
    if (TempFB >= setPoint)
    {
      digitalWrite(Heater2, HIGH);
      digitalWrite(Cooler2, HIGH);
      if (alarmTestTimer == 0) {
        if (almDpSt == 0) {
          if (almBkSt == 0) {
            if (almHumSt == 0) {
              if (fanFail == 0) {
                digitalWrite(Alarm, LOW);
              }
            }
          }
        }
      }
    }

    //depan
    if (TempF >= setPointAtas)
    {
      digitalWrite(Heater1, HIGH);
      digitalWrite(Cooler1, LOW);
      if (alarmTestTimer == 0) {
        if (almDpSt == 0) {
          if (almBkSt == 0) {
            if (almHumSt == 0) {
              if (fanFail == 0) {
                digitalWrite(Alarm, LOW);
              }
            }
          }
        }
      }
    }

    // Belakang
    if (TempFB >= setPointAtas)
    {
      digitalWrite(Heater2, HIGH);
      digitalWrite(Cooler2, LOW);
      if (alarmTestTimer == 0) {
        if (almDpSt == 0) {
          if (almBkSt == 0) {
            if (almHumSt == 0) {
              if (fanFail == 0) {
                digitalWrite(Alarm, LOW);
              }
            }
          }
        }
      }
    }

    if (TempF <= setPointBawah)
    {
      digitalWrite(Heater1, LOW);
      digitalWrite(Cooler1, HIGH);
      if (alarmTestTimer == 0) {
        if (almDpSt == 0) {
          if (almBkSt == 0) {
            if (almHumSt == 0) {
              if (fanFail == 0) {
                digitalWrite(Alarm, LOW);
              }
            }
          }
        }
      }
    }

    // Belakang
    if (TempFB <= setPointBawah)
    {
      digitalWrite(Heater2, LOW);
      digitalWrite(Cooler2, HIGH);
      if (alarmTestTimer == 0) {
        if (almDpSt == 0) {
          if (almBkSt == 0) {
            if (almHumSt == 0) {
              if (fanFail == 0) {
                digitalWrite(Alarm, LOW);
              }
            }
          }
        }
      }
    }
  }


void posisiTempAtas()
{
    // jika posisi temp diatas setting
    // nyalakan Cooler, heater off, fan on
    // Depan
    if (TempF >= heatTemp)
    {
      digitalWrite(Heater1, HIGH);
      digitalWrite(Cooler1, LOW);
      digitalWrite(Alarm, HIGH);
    }

    // Belakang
    if (TempFB >= heatTemp)
    {
      digitalWrite(Heater2, HIGH);
      digitalWrite(Cooler2, LOW);
      digitalWrite(Alarm, HIGH);
    }
  }


void posisiSpray()
{
  // jika posisi humidity dibawah setting
  // nyalakan spray
  //sprayON = 0;
  if (RealHum >= 0)
  {
    if ((RealHum >= setHumPointBawah) && (RealHum <= setHumPointAtas))
    {
      sprayON = 0;
      //digitalWrite(Spray, LOW);
      if (alarmTestTimer == 0) {
        if (almDpSt == 0) {
          if (almBkSt == 0) {
            if (almHumSt == 0) {
              if (fanFail == 0) {
                digitalWrite(Alarm, LOW);
              }
            }
          }
        }
      }

    }

    if (RealHum <= setHumPointBawah)
    {
      sprayON = 1;
      //digitalWrite(Spray, HIGH);
      if (alarmTestTimer == 0) {
        if (almDpSt == 0) {
          if (almBkSt == 0) {
            if (almHumSt == 0) {
              if (fanFail == 0) {
                digitalWrite(Alarm, LOW);
              }
            }
          }
        }
      }

    }

    if (RealHum > setHumPointAtas)
    {
      sprayON = 0;
      //digitalWrite(Spray, LOW);
      if (alarmTestTimer == 0) {
        if (almDpSt == 0) {
          if (almBkSt == 0) {
            if (almHumSt == 0) {
              if (fanFail == 0) {
                digitalWrite(Alarm, LOW);
              }
            }
          }
        }
      }
    }

    if (RealHum >= setHumAtas)
    {
      sprayON = 0;
      //digitalWrite(Spray, LOW);
      digitalWrite (Alarm, HIGH);
    }


    if (RealHum <= setHumBawah)
    {
      sprayON = 1;
      //digitalWrite(Spray, HIGH);
      if (alarmTestTimer == 0) {
        if (almDpSt == 0) {
          if (almBkSt == 0) {
            if (almHumSt == 0) {
              if (fanFail == 0) {
                digitalWrite(Alarm, LOW);
              }
            }
          }
        }
      }
    }
  }
}



void graphLoop()
{
  if (true)
  {
    if (myTouch.dataAvailable())
    {
      myTouch.read();
      x = myTouch.getX();
      y = myTouch.getY();

      if (page == 0)
      {
        if ((x >= 355) && (x <= 555))
        {
          if ((y >= 253) && (y <= 301))
          {
            //action button SETPOINT            
            page = 2;
            myGLCD.clrScr();
            valSetpoint();            
          }
        }
        
        if ((x >= 50) && (x <= 250))
        {
          if ((y >= 403) && (y <= 452))
          {
            //action button KALIBRASI
            page = 1;
            myGLCD.clrScr();
            valKalibrasi();
          }
        }

        if ((y >= 375) && (y <= 455))
        {
          if ((x >= 355) && (x <= 441))
          {
            test = 1;
          }

          if ((x >= 468) && (x <= 553))
          {
            aLrm = 1;
          }
         }       
      }

      if (page == 1)
      {
        if ((y >= 130) && (y <= 170))
        {
          if ((x >= 200) && (x <= 240))
          {
            //tambah kal depan
            IncreaseKalDp();
          }
          if ((x >= 480) && (x <= 520))
          {
            //tambah kal belakang
            IncreaseKalBk();
          }
          if ((x >= 748) && (x <= 788))
          {
            //tambah kal hum
            IncreaseKalHum();
          }
        }
        if ((y >= 260) && (y <= 300))
        {
          if ((x >= 200) && (x <= 240))
          {
            //kurang kal depan
            DecreaseKalDp();
          }
          if ((x >= 480) && (x <= 520))
          {
            //kurang kal belakang
            DecreaseKalBk();
          }
          if ((x >= 748) && (x <= 788))
          {
            //kurang kal hum
            DecreaseKalHum();
          }
        }
        if ((y >= 380) && (y <= 440))
        {
          if ((x >= 200) && (x <= 450))
          {
            //action for 'save' button
            page = 0;
            EEPROM.writeFloat(EepromKalDp, kalibrasiDepan);
            EEPROM.writeFloat(EepromKalBk, kalibrasiBlk);
            EEPROM.write(EepromKalHum, kalibrasiHum);
            myGLCD.clrScr();
            mainscr();
          }
          if ((x >= 500) && (x <= 750))
          {
            //action for 'cancel' button
            page = 0;
            kalibrasiDepan = EEPROM.readFloat(EepromKalDp);
            kalibrasiBlk = EEPROM.readFloat(EepromKalBk);
            kalibrasiHum = EEPROM.read(EepromKalHum);
            myGLCD.clrScr();
            mainscr();
          }
        }
      }
            
      if (page == 2)
      {
        if ((y >= 130) && (y <= 170))
        {
          if ((x >= 200) && (x <= 240))
          {
            //tambah setpoint temp
            IncreaseSetpoint();
          }
          if ((x >= 480) && (x <= 520))
          {
            //tambah setpiont hum
            IncreaseSetPointHum();
          }
          /*
          if ((x >= 748) && (x <= 788))
          {
            //tambah sampling
            IncreaseSampling();
          } */
        }
        if ((y >= 260) && (y <= 300))
        {
          if ((x >= 200) && (x <= 240))
          {
            //kurang setpoint temp
            DecreaseSetpoint();
          }
          if ((x >= 480) && (x <= 520))
          {
            //kurang setpoint hum
            DecreaseSetPointHum();
          }
          /*
          if ((x >= 748) && (x <= 788))
          {
            //kurang sampling
            DecreaseSampling();
          } */
        }
        if ((y >= 380) && (y <= 440))
        {
          if ((x >= 200) && (x <= 450))
          {
            //action for 'save' button
            page = 0;
            EEPROM.writeFloat(EepromSetpoint, setPoint);
            heatTemp = setPoint + 0.5;
            setPointAtas = setPoint + 0.2;
            setPointBawah = setPoint - 0.1;
            lowTemp = setPoint - 0.5;
            EEPROM.write(EepromSetpointHum, setHumPoint);
            setHumPointBawah = setHumPoint - 2;
            setHumPointAtas = setHumPoint + 2;
            setHumAtas = setHumPoint + 10;
            setHumBawah = setHumPoint - 10;
            //EEPROM.write(EepromSampling, sampling);
            sampling = 1000;
            samplingB = sampling;
            myGLCD.clrScr();
            mainscr();
          }
          if ((x >= 500) && (x <= 750))
          {
            //action for 'cancel' button
            page = 0;
            setPoint = EEPROM.readFloat(EepromSetpoint);
            heatTemp = setPoint + 0.5;
            setPointAtas = setPoint + 0.2;
            setPointBawah = setPoint - 0.1;
            lowTemp = setPoint - 0.5;
            setHumPoint = EEPROM.read(EepromSetpointHum);
            setHumPointBawah = setHumPoint - 2;
            setHumPointAtas = setHumPoint + 2;
            setHumAtas = setHumPoint + 10;
            setHumBawah = setHumPoint - 10;
            //sampling = EEPROM.read(EepromSampling);
            sampling = 1000;
            samplingB = sampling;
            myGLCD.clrScr();
            mainscr();
          }
        }
      }      
    }
  }
}




//Mainmenu
void mainscr()
{
  if (page == 0) {
  myGLCD.fillScr(0, 0, 0);
  myGLCD.setBackColor (0, 0, 0);

  myGLCD.setColor(VGA_WHITE);
  myGLCD.drawRoundRect (0, 0, 798, 47);
  myGLCD.drawRoundRect (1, 1, 797, 46);
  myGLCD.drawRoundRect (2, 2, 796, 45);
  myGLCD.drawRoundRect (3, 3, 795, 44);
  myGLCD.drawRoundRect (4, 4, 794, 43);
  myGLCD.drawRoundRect (5, 5, 793, 42);
  myGLCD.setFont(Inconsola);
  myGLCD.setColor(VGA_FUCHSIA);
  myGLCD.setBackColor (VGA_BLACK);
  myGLCD.print("RZ 7500", CENTER, 10);

  myGLCD.setFont(Inconsola);
  myGLCD.setColor(VGA_YELLOW);
  myGLCD.setBackColor (VGA_BLACK);
  myGLCD.print("FRONT TEMP", 10, 70);
  myGLCD.print("BOTTOM TEMP", 10, 175);
  myGLCD.print("HUMIDITY", 10, 280);
  myGLCD.setFont(Inconsola);
  myGLCD.setColor(VGA_WHITE);
  myGLCD.setBackColor (VGA_BLACK);
  myGLCD.print("F", 185, 120);
  myGLCD.print("F", 185, 220);
  myGLCD.print("%", 185, 325);
  myGLCD.print("F", 500, 100);
  myGLCD.print("%", 500, 190);
  myGLCD.setColor(VGA_WHITE);
  myGLCD.drawRoundRect (2, 60, 315, 478);
  myGLCD.drawRoundRect (3, 61, 314, 477);
  //front val
  myGLCD.drawRoundRect (10, 100, 305, 165);
  myGLCD.drawRoundRect (11, 101, 304, 164);
  //bottom val
  myGLCD.drawRoundRect (10, 205, 305, 270);
  myGLCD.drawRoundRect (11, 206, 304, 269);
  //hum val
  myGLCD.drawRoundRect (10, 310, 305, 375);
  myGLCD.drawRoundRect (11, 311, 304, 374);

  myGLCD.setColor(VGA_WHITE);
  myGLCD.drawRoundRect (340, 60, 570, 315);
  myGLCD.drawRoundRect (341, 61, 569, 314);
  myGLCD.setFont(BigFont);
  myGLCD.setColor(VGA_YELLOW);
  myGLCD.setBackColor (VGA_BLACK);
  myGLCD.print("TEMP SETPOINT", 348, 70);
  myGLCD.print("HUM  SETPOINT", 348, 157);

  myGLCD.setColor(VGA_BLUE);
  myGLCD.fillRoundRect (355, 253, 555, 301);
  myGLCD.setColor(VGA_WHITE);
  myGLCD.drawRoundRect (355, 253, 555, 301);
  myGLCD.drawRoundRect (356, 254, 554, 300);
  myGLCD.drawRoundRect (360, 258, 550, 295);
  myGLCD.drawRoundRect (361, 259, 549, 296);
  myGLCD.setColor(VGA_WHITE);
  myGLCD.setBackColor (VGA_BLUE);
  myGLCD.print("SETPOINT", 390, 270); //set SET POINT

  myGLCD.setColor(VGA_BLUE);
  myGLCD.fillRoundRect (50, 403, 250, 451);
  myGLCD.setColor(VGA_WHITE);
  myGLCD.print("KALIBRASI", 80, 420); //set KALIBRASI
  myGLCD.setColor(VGA_WHITE);
  myGLCD.drawRoundRect (50, 403, 250, 451);
  myGLCD.drawRoundRect (51, 404, 249, 450);
  myGLCD.drawRoundRect (55, 408, 245, 445);
  myGLCD.drawRoundRect (56, 409, 244, 446);

  myGLCD.setColor(VGA_WHITE);
  myGLCD.drawRoundRect (340, 335, 570, 475);
  myGLCD.drawRoundRect (341, 336, 569, 476);
  myGLCD.setColor(VGA_RED);
  myGLCD.fillRoundRect (355, 375, 441, 455);
  myGLCD.setColor(VGA_WHITE);
  myGLCD.drawRoundRect (355, 375, 441, 455);
  myGLCD.drawRoundRect (356, 376, 440, 454);
  myGLCD.setColor(VGA_YELLOW);
  myGLCD.setBackColor(VGA_BLACK);
  myGLCD.print("ALARM CONTROL", 350, 345);
  myGLCD.setColor(VGA_WHITE);
  myGLCD.setBackColor(VGA_RED);
  myGLCD.print("TEST", 368, 408);

  myGLCD.setColor(VGA_GREEN);
  myGLCD.fillRoundRect (468, 375, 553, 455);
  myGLCD.setColor(VGA_WHITE);
  myGLCD.drawRoundRect (468, 375, 553, 455);
  myGLCD.drawRoundRect (469, 376, 552, 454);
  myGLCD.setColor(VGA_WHITE);
  myGLCD.setBackColor(VGA_GREEN);
  myGLCD.print("DELAY", 471, 408); 

  myGLCD.setFont(SevenSegmentFull);
  myGLCD.setColor(VGA_RED);
  myGLCD.setBackColor(VGA_BLACK);
  myGLCD.printNumF(setPoint, 1, 355, 95);
  myGLCD.setColor(VGA_WHITE);
  myGLCD.drawRoundRect (350, 90, 540, 150);
  myGLCD.drawRoundRect (351, 91, 539, 149);

  myGLCD.setColor(VGA_RED);
  myGLCD.setBackColor(VGA_BLACK);
  myGLCD.printNumI(setHumPoint, 355, 185);
  myGLCD.setColor(VGA_WHITE);
  myGLCD.drawRoundRect (350, 180, 540, 240);
  myGLCD.drawRoundRect (351, 181, 539, 239);


  myGLCD.setColor(VGA_WHITE);
  myGLCD.drawRoundRect (600, 60, 798, 477);
  myGLCD.drawRoundRect (601, 61, 797, 476);
  myGLCD.setFont(BigFont);
  myGLCD.setColor(VGA_YELLOW);
  myGLCD.setBackColor (VGA_BLACK);
  myGLCD.print("STATUS", 650, 70);
  
  oldHeater1St = 0;
  oldCooler1St = 0;
  oldHeater2St = 0;
  oldCooler2St = 0;
  oldSpraySt = 0;
  oldAlmDpSt = 0;
  oldAlmBkSt = 0;
  oldAlmHumSt = 0;
  oldAlarmSt = 0;
  oldFanFail = 0;
  oldAlarmCancel = 0;
  
  setPoint = EEPROM.readFloat(EepromSetpoint);
  setHumPoint = EEPROM.read(EepromSetpointHum);
  kalibrasiDepan = EEPROM.readFloat(EepromKalDp);
  kalibrasiBlk = EEPROM.readFloat(EepromKalBk);
  kalibrasiHum = EEPROM.read(EepromKalHum);
  //sampling = EEPROM.read(EepromSampling);

  heatTemp = setPoint + 0.5;
  setPointAtas = setPoint + 0.2;
  setPointBawah = setPoint - 0.1;
  lowTemp = setPoint - 0.5;

  setHumPointBawah = setHumPoint - 2;
  setHumPointAtas = setHumPoint + 2;
  setHumAtas = setHumPoint + 10;
  setHumBawah = setHumPoint - 10;
  sampling = 1000;
  samplingB = sampling;
  }
}

//page 1
void valKalibrasi()
{
  myGLCD.fillScr(0, 0, 0);
  myGLCD.setBackColor (0, 0, 0);
  
  myGLCD.setColor(VGA_WHITE);
  myGLCD.drawRoundRect (0, 0, 798, 47);
  myGLCD.drawRoundRect (1, 1, 797, 46);
  myGLCD.drawRoundRect (2, 2, 796, 45);
  myGLCD.drawRoundRect (3, 3, 795, 44);
  myGLCD.drawRoundRect (4, 4, 794, 43);
  myGLCD.drawRoundRect (5, 5, 793, 42);
  myGLCD.setFont(Inconsola);
  myGLCD.setColor(VGA_YELLOW);
  myGLCD.setBackColor (VGA_BLACK);
  myGLCD.print("SETTING KALIBRASI", CENTER, 10);

  myGLCD.setColor(VGA_WHITE);
  myGLCD.drawRoundRect (10, 70, 270, 325);
  myGLCD.drawRoundRect (11, 71, 269, 324);
  
  myGLCD.drawRoundRect (290, 70, 550, 325);
  myGLCD.drawRoundRect (291, 71, 549, 324);
  
  myGLCD.drawRoundRect (570, 70, 798, 325);
  myGLCD.drawRoundRect (571, 71, 797, 324);
  
  myGLCD.drawRoundRect (10, 350, 798, 470);
  myGLCD.drawRoundRect (11, 351, 797, 469);
  
  myGLCD.setFont(Inconsola);
  myGLCD.setColor(VGA_YELLOW);
  myGLCD.setBackColor (0, 0, 0);
  myGLCD.print("FRONT TEMP", 20, 80);
  myGLCD.print("BOTTM TEMP", 300, 80);
  myGLCD.print("HUMIDITY", 580, 80);

  myGLCD.setFont(SevenSegmentFull);
  myGLCD.setColor(VGA_RED);
  myGLCD.setBackColor (0, 0, 0);
  myGLCD.printNumF(kalibrasiDepan, 1, 20, 190); //kal depan
  myGLCD.printNumF(kalibrasiBlk, 1, 300, 190); //kal belakang
  myGLCD.printNumI(kalibrasiHum, 580, 190); //kal hum


  myGLCD.setFont(Inconsola);
  myGLCD.setColor(255, 255, 255);
  myGLCD.setBackColor(0, 0, 255);
  myGLCD.setColor(0, 0, 255);
  myGLCD.fillRoundRect (200, 130, 240, 170);
  myGLCD.setColor(VGA_WHITE);
  myGLCD.drawRoundRect (200, 130, 240, 170);
  myGLCD.drawRoundRect (201, 131, 239, 169);
  myGLCD.setColor(255, 255, 255);
  myGLCD.print("+", 208, 135);
  myGLCD.setColor(0, 0, 255);
  myGLCD.fillRoundRect (200, 260, 240, 300);
  myGLCD.setColor(VGA_WHITE);
  myGLCD.drawRoundRect (200, 260, 240, 300);
  myGLCD.drawRoundRect (201, 261, 239, 299);
  myGLCD.setColor(255, 255, 255);
  myGLCD.print("-", 208, 265);
  myGLCD.setColor(255, 255, 0);
  myGLCD.drawLine(220, 171, 220, 259);
  myGLCD.drawLine(221, 171, 221, 259);
  
  myGLCD.setColor(255, 255, 255);
  myGLCD.setBackColor(0, 0, 255);
  myGLCD.setColor(0, 0, 255);
  myGLCD.fillRoundRect (480, 130, 520, 170);
  myGLCD.setColor(VGA_WHITE);
  myGLCD.drawRoundRect (480, 130, 520, 170);
  myGLCD.drawRoundRect (481, 131, 519, 169);
  myGLCD.setColor(255, 255, 255);
  myGLCD.print("+", 488, 135);
  myGLCD.setColor(0, 0, 255);
  myGLCD.fillRoundRect (480, 260, 520, 300);
  myGLCD.setColor(VGA_WHITE);
  myGLCD.drawRoundRect (480, 260, 520, 300);
  myGLCD.drawRoundRect (481, 261, 519, 299);
  myGLCD.setColor(255, 255, 255);
  myGLCD.print("-", 488, 265);
  myGLCD.setColor(255, 255, 0);
  myGLCD.drawLine(500, 171, 500, 259);
  myGLCD.drawLine(501, 171, 501, 259);
  
  myGLCD.setColor(255, 255, 255);
  myGLCD.setBackColor(0, 0, 255);
  myGLCD.setColor(0, 0, 255);
  myGLCD.fillRoundRect (748, 130, 788, 170);
  myGLCD.setColor(VGA_WHITE);
  myGLCD.drawRoundRect (748, 130, 788, 170);
  myGLCD.drawRoundRect (749, 131, 787, 169);
  myGLCD.setColor(255, 255, 255);
  myGLCD.print("+", 756, 135);
  myGLCD.setColor(0, 0, 255);
  myGLCD.fillRoundRect (748, 260, 788, 300);
  myGLCD.setColor(VGA_WHITE);
  myGLCD.drawRoundRect (748, 260, 788, 300);
  myGLCD.drawRoundRect (749, 261, 787, 299);
  myGLCD.setColor(255, 255, 255);
  myGLCD.print("-", 756, 265);
  myGLCD.setColor(255, 255, 0);
  myGLCD.drawLine(768, 171, 768, 259);
  myGLCD.drawLine(769, 171, 769, 259);
  
  
  myGLCD.setColor(VGA_BLUE);
  myGLCD.fillRoundRect (200, 380, 450, 440);
  myGLCD.setColor(VGA_WHITE);
  myGLCD.print("S A V E", 240, 400); //SAVE
  myGLCD.setColor(VGA_WHITE);
  myGLCD.drawRoundRect (200, 380, 450, 440);
  myGLCD.drawRoundRect (201, 381, 449, 439);
  myGLCD.drawRoundRect (205, 385, 445, 435);
  myGLCD.drawRoundRect (206, 386, 444, 434);
  
  myGLCD.setColor(VGA_BLUE);
  myGLCD.fillRoundRect (500, 380, 750, 440);
  myGLCD.setColor(VGA_WHITE);
  myGLCD.print("CANCEL", 560, 400); //CANCEL
  myGLCD.setColor(VGA_WHITE);
  myGLCD.drawRoundRect (500, 380, 750, 440);
  myGLCD.drawRoundRect (501, 381, 749, 439);
  myGLCD.drawRoundRect (505, 385, 745, 435);
  myGLCD.drawRoundRect (506, 386, 744, 434);
}


//page 2
void valSetpoint()
{
  myGLCD.fillScr(0, 0, 0);
  myGLCD.setBackColor (0, 0, 0);
  
  myGLCD.setColor(VGA_WHITE);
  myGLCD.drawRoundRect (0, 0, 798, 47);
  myGLCD.drawRoundRect (1, 1, 797, 46);
  myGLCD.drawRoundRect (2, 2, 796, 45);
  myGLCD.drawRoundRect (3, 3, 795, 44);
  myGLCD.drawRoundRect (4, 4, 794, 43);
  myGLCD.drawRoundRect (5, 5, 793, 42);
  myGLCD.setFont(Inconsola);
  myGLCD.setColor(VGA_YELLOW);
  myGLCD.setBackColor (VGA_BLACK);
  myGLCD.print("SETTING SET POINT", CENTER, 10);

  myGLCD.setColor(VGA_WHITE);
  myGLCD.drawRoundRect (10, 70, 270, 325);
  myGLCD.drawRoundRect (11, 71, 269, 324);
  
  myGLCD.drawRoundRect (290, 70, 550, 325);
  myGLCD.drawRoundRect (291, 71, 549, 324);
  /*
  myGLCD.drawRoundRect (570, 70, 798, 325);
  myGLCD.drawRoundRect (571, 71, 797, 324);
  */
  myGLCD.drawRoundRect (10, 350, 798, 470);
  myGLCD.drawRoundRect (11, 351, 797, 469);
  
  myGLCD.setFont(Inconsola);
  myGLCD.setColor(VGA_YELLOW);
  myGLCD.setBackColor (0, 0, 0);
  myGLCD.print("SET TEMP", 20, 80);
  myGLCD.print("SET HUM", 300, 80);
  //myGLCD.print("SAMPLING", 580, 80);

  myGLCD.setFont(SevenSegmentFull);
  myGLCD.setColor(VGA_RED);
  myGLCD.setBackColor (0, 0, 0);
  myGLCD.printNumF(setPoint, 1, 20, 190); //temp set
  myGLCD.printNumI(setHumPoint, 300, 190); //hum set
  //myGLCD.printNumI(sampling, 580, 190); //sampling


  myGLCD.setFont(Inconsola);
  myGLCD.setColor(255, 255, 255);
  myGLCD.setBackColor(0, 0, 255);
  myGLCD.setColor(0, 0, 255);
  myGLCD.fillRoundRect (200, 130, 240, 170);
  myGLCD.setColor(VGA_WHITE);
  myGLCD.drawRoundRect (200, 130, 240, 170);
  myGLCD.drawRoundRect (201, 131, 239, 169);
  myGLCD.setColor(255, 255, 255);
  myGLCD.print("+", 208, 135);
  myGLCD.setColor(0, 0, 255);
  myGLCD.fillRoundRect (200, 260, 240, 300);
  myGLCD.setColor(VGA_WHITE);
  myGLCD.drawRoundRect (200, 260, 240, 300);
  myGLCD.drawRoundRect (201, 261, 239, 299);
  myGLCD.setColor(255, 255, 255);
  myGLCD.print("-", 208, 265);
  myGLCD.setColor(255, 255, 0);
  myGLCD.drawLine(220, 171, 220, 259);
  myGLCD.drawLine(221, 171, 221, 259);
  
  myGLCD.setColor(255, 255, 255);
  myGLCD.setBackColor(0, 0, 255);
  myGLCD.setColor(0, 0, 255);
  myGLCD.fillRoundRect (480, 130, 520, 170);
  myGLCD.setColor(VGA_WHITE);
  myGLCD.drawRoundRect (480, 130, 520, 170);
  myGLCD.drawRoundRect (481, 131, 519, 169);
  myGLCD.setColor(255, 255, 255);
  myGLCD.print("+", 488, 135);
  myGLCD.setColor(0, 0, 255);
  myGLCD.fillRoundRect (480, 260, 520, 300);
  myGLCD.setColor(VGA_WHITE);
  myGLCD.drawRoundRect (480, 260, 520, 300);
  myGLCD.drawRoundRect (481, 261, 519, 299);
  myGLCD.setColor(255, 255, 255);
  myGLCD.print("-", 488, 265);
  myGLCD.setColor(255, 255, 0);
  myGLCD.drawLine(500, 171, 500, 259);
  myGLCD.drawLine(501, 171, 501, 259);
  
  /*
  myGLCD.setColor(255, 255, 255);
  myGLCD.setBackColor(0, 0, 255);
  myGLCD.setColor(0, 0, 255);
  myGLCD.fillRoundRect (748, 130, 788, 170);
  myGLCD.setColor(VGA_WHITE);
  myGLCD.drawRoundRect (748, 130, 788, 170);
  myGLCD.drawRoundRect (749, 131, 787, 169);
  myGLCD.setColor(255, 255, 255);
  myGLCD.print("+", 756, 135);
  myGLCD.setColor(0, 0, 255);
  myGLCD.fillRoundRect (748, 260, 788, 300);
  myGLCD.setColor(VGA_WHITE);
  myGLCD.drawRoundRect (748, 260, 788, 300);
  myGLCD.drawRoundRect (749, 261, 787, 299);
  myGLCD.setColor(255, 255, 255);
  myGLCD.print("-", 756, 265);
  myGLCD.setColor(255, 255, 0);
  myGLCD.drawLine(768, 171, 768, 259);
  myGLCD.drawLine(769, 171, 769, 259);
  */
  
  myGLCD.setColor(VGA_BLUE);
  myGLCD.fillRoundRect (200, 380, 450, 440);
  myGLCD.setColor(VGA_WHITE);
  myGLCD.print("S A V E", 240, 400); //SAVE
  myGLCD.setColor(VGA_WHITE);
  myGLCD.drawRoundRect (200, 380, 450, 440);
  myGLCD.drawRoundRect (201, 381, 449, 439);
  myGLCD.drawRoundRect (205, 385, 445, 435);
  myGLCD.drawRoundRect (206, 386, 444, 434);
  
  myGLCD.setColor(VGA_BLUE);
  myGLCD.fillRoundRect (500, 380, 750, 440);
  myGLCD.setColor(VGA_WHITE);
  myGLCD.print("CANCEL", 560, 400); //CANCEL
  myGLCD.setColor(VGA_WHITE);
  myGLCD.drawRoundRect (500, 380, 750, 440);
  myGLCD.drawRoundRect (501, 381, 749, 439);
  myGLCD.drawRoundRect (505, 385, 745, 435);
  myGLCD.drawRoundRect (506, 386, 744, 434);
}

void IncreaseSetpoint()
{
  setPoint = setPoint + 0.1;
  if (setPoint >= 100.0)
  {
    setPoint = 100.0;
  }
  if (page == 2)
  {
    myGLCD.setFont(SevenSegmentFull);
    myGLCD.setColor(VGA_RED);
    myGLCD.setBackColor (0, 0, 0);
    myGLCD.printNumF(setPoint, 1, 20, 190);
  }
}


void DecreaseSetpoint()
{
  setPoint = setPoint - 0.1;
  if (setPoint <= 0.0)
  {
    setPoint = 0.0;
  }
  if (page == 2)
  {
    myGLCD.setFont(SevenSegmentFull);
    myGLCD.setColor(VGA_RED);
    myGLCD.setBackColor (0, 0, 0);
    myGLCD.printNumF(setPoint, 1, 20, 190);
  }
}


void IncreaseKalDp()
{
  kalibrasiDepan = kalibrasiDepan + 0.1;
  if (kalibrasiDepan >= 100.0)
  {
    kalibrasiDepan = 100.0;
  }
  if (page == 1)
  {
    myGLCD.setFont(SevenSegmentFull);
    myGLCD.setColor(VGA_RED);
    myGLCD.setBackColor (0, 0, 0);
    myGLCD.printNumF(kalibrasiDepan, 1, 20, 190);
  }
}


void DecreaseKalDp()
{
  kalibrasiDepan = kalibrasiDepan - 0.1;
  if (kalibrasiDepan <= 0.0)
  {
    kalibrasiDepan = 0.0;
  }
  if (page == 1)
  {
    myGLCD.setFont(SevenSegmentFull);
    myGLCD.setColor(VGA_RED);
    myGLCD.setBackColor (0, 0, 0);
    myGLCD.printNumF(kalibrasiDepan, 1, 20, 190);
  }
}


void IncreaseKalBk()
{
  kalibrasiBlk = kalibrasiBlk + 0.1;
  if (kalibrasiBlk >= 100.0)
  {
    kalibrasiBlk = 100.0;
  }
  if (page == 1)
  {
    myGLCD.setFont(SevenSegmentFull);
    myGLCD.setColor(VGA_RED);
    myGLCD.setBackColor (0, 0, 0);
    myGLCD.printNumF(kalibrasiBlk, 1, 300, 190);
  }
}


void DecreaseKalBk()
{
  kalibrasiBlk = kalibrasiBlk - 0.1;
  if (kalibrasiBlk <= 0.0)
  {
    kalibrasiBlk = 0.0;
  }
  if (page == 1)
  {
    myGLCD.setFont(SevenSegmentFull);
    myGLCD.setColor(VGA_RED);
    myGLCD.setBackColor (0, 0, 0);
    myGLCD.printNumF(kalibrasiBlk, 1, 300, 190);
  }
}


void IncreaseSetPointHum()
{
  setHumPoint = setHumPoint + 1;
  if (setHumPoint >= 99)
  {
    setHumPoint = 99;
  }
  if (page == 2)
  {
    myGLCD.setFont(SevenSegmentFull);
    myGLCD.setColor(VGA_RED);
    myGLCD.setBackColor (0, 0, 0);
    myGLCD.printNumI(setHumPoint, 300, 190);
  }
}


void DecreaseSetPointHum()
{
  setHumPoint = setHumPoint - 1;
  if (setHumPoint <= 0)
  {
    setHumPoint = 0;
  }
  if (page == 2)
  {
    myGLCD.setFont(SevenSegmentFull);
    myGLCD.setColor(VGA_RED);
    myGLCD.setBackColor (0, 0, 0);
    myGLCD.printNumI(setHumPoint, 300, 190);
  }
}


void IncreaseKalHum()
{
  kalibrasiHum = kalibrasiHum + 1;
  if (kalibrasiHum >= 100)
  {
    kalibrasiHum = 100;
  }
  if (page == 1)
  {
    myGLCD.setFont(SevenSegmentFull);
    myGLCD.setColor(VGA_RED);
    myGLCD.setBackColor (0, 0, 0);
    myGLCD.printNumI(kalibrasiHum, 580, 190);
  }
}


void DecreaseKalHum()
{
  kalibrasiHum = kalibrasiHum - 1;
  if (kalibrasiHum <= 0)
  {
    kalibrasiHum = 0;
  }
  if (page == 1)
  {
    myGLCD.setFont(SevenSegmentFull);
    myGLCD.setColor(VGA_RED);
    myGLCD.setBackColor (0, 0, 0);
    myGLCD.printNumI(kalibrasiHum, 580, 190);
  }
}

/*
void IncreaseSampling()
{
  sampling = sampling + 1;
  if (sampling >= 200)
  {
    sampling = 200;
  }
  if (page == 2)
  {
    myGLCD.setFont(SevenSegmentFull);
    myGLCD.setColor(VGA_RED);
    myGLCD.setBackColor (0, 0, 0);
    myGLCD.printNumI(sampling, 580, 190);
  }
}


void DecreaseSampling()
{
  sampling = sampling - 1;
  if (sampling <= 0)
  {
    sampling = 0;
  }
  if (page == 2)
  {
    myGLCD.setFont(SevenSegmentFull);
    myGLCD.setColor(VGA_RED);
    myGLCD.setBackColor (0, 0, 0);
    myGLCD.printNumI(sampling, 580, 190);
  }
}
*/

void sprayTimer()
{
  if (sprayON == 1)
  {
    jmlTimer++;
    if (jmlTimer >= jmlTimerSpray)
    {
      if (digitalRead(Spray) == LOW)
      { 
        sprayL = 0;
        sprayH += 1;
        if (sprayH >= 100){
        digitalWrite(Spray, HIGH); 
        }
      }
      else
      { 
        sprayL += 1;
        if (sprayL >= 100) {
        digitalWrite(Spray, LOW);
        sprayH = 0;}
      }
      jmlTimer = 0;

    }
  }
  else {
    digitalWrite(Spray, HIGH);
    jmlTimer = 0; 
    sprayH = 0;
    sprayL = 0;
  }
}

/*
void controlSpray()
{
  idleSpray += 1;
  if (idleSpray >= 1000)
  {
    Spray = 53;
    digitalWrite(10, LOW);
  }
  else {
    digitalWrite (53, LOW);
  }
}
*/

void checkStatusOutput()
{
  if (RealHum >= 0)
  {
  //aktifkan fanfailure
  digitalWrite (fanReturn, HIGH);

  spraySt = digitalRead(Spray);
  heater1St = digitalRead(Heater1);
  heater2St = digitalRead(Heater2);
  cooler1St = digitalRead(Cooler1);
  cooler2St = digitalRead(Cooler2);
  alarmSt = digitalRead(Alarm);
  alarmdlSt = digitalRead(alarmCancel);
  //turnSt = digitalRead(Turn);
  fanReturnSt = digitalRead(fanReturn);

  if (fanReturnSt == HIGH) {
    fanFail = 1;
  }
  else {
    fanFail = 0;
  }

  if (EEPROM.read(17) == 26)
  {
    almDisSt = 1;
  }
  if (EEPROM.read(17) == 10)
  {
    almDisSt = 0;
  }

  //sinyal alarm depan
  if (TempF >= heatTemp) {
    almDpSt = 1;
  }
  else almDpSt = 0;

  //sinyal alarm belakang
  if (TempFB >= heatTemp) {
    almBkSt = 1;
  }
  else almBkSt = 0;

  //sinyal alarm humidity
  if (RealHum >= 0) {
    if (RealHum >= setHumAtas) {
      almHumSt = 1;
    }
    else almHumSt = 0;
    }
  }
}


void signal()
{
  if (page == 0)
  {
    if (heater1St == 0)
    {
      if (oldHeater1St == 0) 
      {
      myGLCD.setFont(Inconsola);
      myGLCD.setColor(VGA_RED);
      myGLCD.fillRoundRect (610, 95, 788, 140);
      myGLCD.setColor(VGA_WHITE);
      myGLCD.setBackColor(VGA_RED);
      myGLCD.setColor(VGA_WHITE);
      myGLCD.print("HEATER1", 615, 105);
      oldHeater1St = 1;
      }
    }

   if (heater1St == 1)
   {
      if (oldHeater1St == 1) 
      {
      myGLCD.setFont(Inconsola);
      myGLCD.setColor(VGA_BLACK);
      myGLCD.fillRoundRect (610, 95, 788, 140);
      myGLCD.setColor(VGA_WHITE);
      myGLCD.setBackColor(VGA_BLACK);
      myGLCD.setColor(VGA_BLACK);
      myGLCD.print("HEATER1", 615, 105);
      oldHeater1St = 0;
      }
    }
   
  if (cooler1St == 0)
  {
    if (oldCooler1St == 0)
    {
      myGLCD.setFont(Inconsola);
      myGLCD.setColor(VGA_BLUE);
      myGLCD.fillRoundRect (610, 160, 788, 205);
      myGLCD.setColor(VGA_WHITE);
      myGLCD.setBackColor(VGA_BLUE);
      myGLCD.setColor(VGA_WHITE);
      myGLCD.print("COOLER1", 615, 170);
      oldCooler1St = 1;
    }
  }

  if (cooler1St == 1)
  {
    if (oldCooler1St == 1)
    {
      myGLCD.setFont(Inconsola);
      myGLCD.setColor(VGA_BLACK);
      myGLCD.fillRoundRect (610, 160, 788, 205);
      myGLCD.setColor(VGA_WHITE);
      myGLCD.setBackColor(VGA_BLACK);
      myGLCD.setColor(VGA_BLACK);
      myGLCD.print("COOLER1", 615, 170);
      oldCooler1St = 0;
    }
  }

  if (heater2St == 0)
  {
    if (oldHeater2St == 0)
    {
      myGLCD.setFont(Inconsola);
      myGLCD.setColor(VGA_RED);
      myGLCD.fillRoundRect (610, 225, 788, 270);
      myGLCD.setColor(VGA_WHITE);
      myGLCD.setBackColor(VGA_RED);
      myGLCD.setColor(VGA_WHITE);
      myGLCD.print("HEATER2", 615, 235);
      oldHeater2St = 1;
     }
  }

  if (heater2St == 1)
  {
    if (oldHeater2St == 1)
    {
      myGLCD.setFont(Inconsola);
      myGLCD.setColor(VGA_BLACK);
      myGLCD.fillRoundRect (610, 225, 788, 270);
      myGLCD.setColor(VGA_WHITE);
      myGLCD.setBackColor(VGA_BLACK);
      myGLCD.setColor(VGA_BLACK);
      myGLCD.print("HEATER2", 615, 235);
      oldHeater2St = 0;
    }
  }

  if (cooler2St == 0)
  {
    if (oldCooler2St == 0)
    {
      myGLCD.setFont(Inconsola);
      myGLCD.setColor(VGA_BLUE);
      myGLCD.fillRoundRect (610, 290, 788, 335);
      myGLCD.setColor(VGA_WHITE);
      myGLCD.setBackColor(VGA_BLUE);
      myGLCD.setColor(VGA_WHITE);
      myGLCD.print("COOLER2", 615, 300);
      oldCooler2St = 1;
    }
  }

  if (cooler2St == 1)
  {
    if (oldCooler2St == 1)
    {
      myGLCD.setFont(Inconsola);
      myGLCD.setColor(VGA_BLACK);
      myGLCD.fillRoundRect (610, 290, 788, 335);
      myGLCD.setColor(VGA_WHITE);
      myGLCD.setBackColor(VGA_BLACK);
      myGLCD.setColor(VGA_BLACK);
      myGLCD.print("COOLER2", 615, 300);
      oldCooler2St = 0;
    }
  }

  if (sprayON == 1)
  {
    if (oldSpraySt == 0)
    {
      myGLCD.setFont(Inconsola);
      myGLCD.setColor(VGA_AQUA);
      myGLCD.fillRoundRect (610, 355, 788, 400);
      myGLCD.setColor(VGA_WHITE);
      myGLCD.setBackColor(VGA_AQUA);
      myGLCD.setColor(VGA_BLACK);
      myGLCD.print("SPRAY", 635, 365);
      oldSpraySt = 1;
    }
  }

  if (sprayON == 0)
  {
    if (oldSpraySt == 1)
    {
      myGLCD.setFont(Inconsola);
      myGLCD.setColor(VGA_BLACK);
      myGLCD.fillRoundRect (610, 355, 788, 400);
      myGLCD.setColor(VGA_WHITE);
      myGLCD.setBackColor(VGA_BLACK);
      myGLCD.setColor(VGA_BLACK);
      myGLCD.print("SPRAY", 635, 365);
      oldSpraySt = 0;
    }
  }

  if (almDpSt == 1)
  {
    if (oldAlmDpSt == 0)
    {
      myGLCD.setFont(Inconsola);
      myGLCD.setColor(VGA_RED);
      myGLCD.fillRoundRect (250, 110, 300, 155);
      myGLCD.setBackColor(VGA_RED);
      myGLCD.setColor(VGA_WHITE);
      myGLCD.print("AL", 252, 120);
      oldAlmDpSt = 1;
    }
  }

  if (almDpSt == 0)
  {
    if (oldAlmDpSt == 1)
    {
      myGLCD.setFont(Inconsola);
      myGLCD.setColor(VGA_BLACK);
      myGLCD.fillRoundRect (250, 110, 300, 155);
      myGLCD.setBackColor(VGA_BLACK);
      myGLCD.setColor(VGA_BLACK);
      myGLCD.print("AL", 252, 120);
      oldAlmDpSt = 0;
    }
  }


  if (almBkSt == 1)
  {
    if (oldAlmBkSt == 0)
    {
      myGLCD.setFont(Inconsola);
      myGLCD.setColor(VGA_RED);
      myGLCD.fillRoundRect (250, 215, 300, 260);
      myGLCD.setBackColor(VGA_RED);
      myGLCD.setColor(VGA_WHITE);
      myGLCD.print("AL", 252, 225);
      oldAlmBkSt = 1;
    }
  }

  if (almBkSt == 0)
  {
    if (oldAlmBkSt == 1)
    {
      myGLCD.setFont(Inconsola);
      myGLCD.setColor(VGA_BLACK);
      myGLCD.fillRoundRect (250, 215, 300, 260);
      myGLCD.setBackColor(VGA_BLACK);
      myGLCD.setColor(VGA_BLACK);
      myGLCD.print("AL", 252, 225);
      oldAlmBkSt = 0;
    }
  }


  if (almHumSt == 1)
  {
    if (oldAlmHumSt == 0)
    {
      myGLCD.setFont(Inconsola);
      myGLCD.setColor(VGA_RED);
      myGLCD.fillRoundRect (250, 320, 300, 365);
      myGLCD.setBackColor(VGA_RED);
      myGLCD.setColor(VGA_WHITE);
      myGLCD.print("AL", 252, 330);
      oldAlmHumSt = 1;
    }
  }

  if (almHumSt == 0)
  {
    if (oldAlmHumSt == 1)
    {
      myGLCD.setFont(Inconsola);
      myGLCD.setColor(VGA_BLACK);
      myGLCD.fillRoundRect (250, 320, 300, 365);
      myGLCD.setBackColor(VGA_BLACK);
      myGLCD.setColor(VGA_BLACK);
      myGLCD.print("AL", 252, 330);
      oldAlmHumSt = 0;
    }
  }


  if (fanFail == 1)
  {
    if (oldFanFail == 0)
    {
      myGLCD.setFont(Inconsola);
      myGLCD.setColor(VGA_RED);
      myGLCD.fillRoundRect (610, 420, 788, 465);
      myGLCD.setColor(VGA_WHITE);
      myGLCD.setBackColor(VGA_RED);
      myGLCD.setColor(VGA_WHITE);
      myGLCD.print("FANFAIL", 615, 430);
      oldFanFail = 1;
    }
  }

  if (fanFail == 0)
  {
    if (oldFanFail == 1)
    {
      myGLCD.setFont(Inconsola);
      myGLCD.setColor(VGA_BLACK);
      myGLCD.fillRoundRect (610, 420, 788, 465);
      myGLCD.setColor(VGA_WHITE);
      myGLCD.setBackColor(VGA_BLACK);
      myGLCD.setColor(VGA_BLACK);
      myGLCD.print("FANFAIL", 615, 430);
      oldFanFail = 0;
    }
  }
  
  if (alarmSt == 1)
  {
    if (oldAlarmSt == 0)
    {
      myGLCD.setFont(Inconsola);
      myGLCD.setColor(VGA_RED);
      myGLCD.fillRoundRect (6, 6, 300, 41);
      myGLCD.fillRoundRect (494, 6, 792, 41);
      myGLCD.setBackColor(VGA_RED);
      myGLCD.setColor(VGA_WHITE);
      myGLCD.print("ALARM !!", 60, 10);
      myGLCD.print("ALARM !!", 564, 10);
      oldAlarmSt = 1;
    }
  }

  if (alarmSt == 0)
  {
    if (oldAlarmSt == 1)
    {
      myGLCD.setFont(Inconsola);
      myGLCD.setColor(VGA_BLACK);
      myGLCD.fillRoundRect (6, 6, 300, 41);
      myGLCD.fillRoundRect (494, 6, 792, 41);
      myGLCD.setBackColor(VGA_BLACK);
      myGLCD.setColor(VGA_BLACK);
      myGLCD.print("ALARM !!", 60 , 10);
      myGLCD.print("ALARM !!", 564, 10);
      oldAlarmSt = 0;
    }
  }
  
  if (alarmdlSt == 0)
  {
    if (oldAlarmCancel == 1)
    {
      myGLCD.setFont(BigFont);
      myGLCD.setColor(VGA_GREEN);
      myGLCD.fillRoundRect (468, 375, 553, 455);
      myGLCD.setColor(VGA_WHITE);
      myGLCD.drawRoundRect (468, 375, 553, 455);
      myGLCD.drawRoundRect (469, 376, 552, 454);
      myGLCD.setColor(VGA_WHITE);
      myGLCD.setBackColor(VGA_GREEN);
      myGLCD.print("DELAY", 471, 408);
      oldAlarmCancel = 0;
    }
  }
  
  if (alarmdlSt == 1)
  {
    if (oldAlarmCancel == 0)
    {
      myGLCD.setFont(BigFont);
      myGLCD.setColor(VGA_BLACK);
      myGLCD.fillRoundRect (468, 375, 553, 455);
      myGLCD.setColor(VGA_WHITE);
      myGLCD.drawRoundRect (468, 375, 553, 455);
      myGLCD.drawRoundRect (469, 376, 552, 454);
      myGLCD.setColor(VGA_WHITE);
      myGLCD.setBackColor(VGA_BLACK);
      myGLCD.print("DELAY", 471, 408);
      oldAlarmCancel = 1;
    }
  }
  
  
  }
}


//alarm cancel
void delayAlarm()
{
  if (aLrm == 1) {
    digitalWrite(alarmCancel, HIGH);
  }
}



void controlAlarm()
{
  int statusAlarm = digitalRead(Alarm);
  int statusCancel = digitalRead(alarmCancel);
  int statusOut = digitalRead(alarmOut);

if (cancelAlarmTimer >= 30000) {
    dlTimer += 1;
    cancelAlarmTimer = 0;
    cancelAlarmTimer += 1;
    if (dlTimer >= 31) { 
    digitalWrite (alarmCancel, LOW);
    statusCancel = 0;
    cancelAlarmTimer = 0;
    dlTimer = 0;
    aLrm = 0;
    }
  }

  if (statusAlarm == 1) {
    if (statusCancel == 1) {
      digitalWrite(alarmOut, HIGH);
      cancelAlarmTimer += 1;
    }
    else if (statusCancel == 0) {
      digitalWrite(alarmOut, LOW);
    }
  }
  if (statusAlarm == 0) {
    if (statusCancel == 1) {
      digitalWrite(alarmOut, HIGH);
      cancelAlarmTimer += 1;
    }
    else if (statusCancel == 0) {
      cancelAlarmTimer = 0;
      statusCancel = 0;
      aLrm = 0;
      digitalWrite (alarmOut, HIGH);
    }
  }
  
  if ((TempF >= setPoint) && (TempF <= setPointAtas))
    {
      if ((TempFB >= setPoint) && (TempFB <= setPointAtas))
      {
      digitalWrite (alarmCancel, LOW);
      statusCancel = 0;
      cancelAlarmTimer = 0;
      dlTimer = 0;
      aLrm = 0;
    }
  }
}


void alarmTest()
{
  if (test == 1) {
    digitalWrite (Alarm, HIGH);
    alarmTestTimer += 1;
  }

  if (alarmTestTimer >= 60) {
    alarmTestTimer = 0;
    test = 0;
    digitalWrite (Alarm, LOW);
  }
}


void alarmFanFail()
{
  if (fanFail == 1)
  {
    digitalWrite(Alarm, HIGH);
  }
  if (fanFail == 0)
  {
    if (alarmTestTimer == 0) {
      if (almDpSt == 0) {
        if (almBkSt == 0) {
          if (almHumSt == 0) {
            digitalWrite(Alarm, LOW);
          }
        }
      }
    }
  }
}

/*
void disableAlarm()
{

  if (EEPROM.read(17) == 26)
  {
    alarmOut = 26;
  }
  if (EEPROM.read(17) == 10)
  {
    alarmOut = 10;
  }

  if (alarmOut == 26)
  {
    digitalWrite (10, LOW);
  }
  else {
    digitalWrite (26, LOW);
  }
}
*/
